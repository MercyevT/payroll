#pragma checksum "C:\Users\max_w\Desktop\projectpayroll\Views\slipSalary\index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eb3aed4234e20ee368e01060ee2d29c6940ce93a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_slipSalary_index), @"mvc.1.0.view", @"/Views/slipSalary/index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\max_w\Desktop\projectpayroll\Views\_ViewImports.cshtml"
using projectpayroll;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\max_w\Desktop\projectpayroll\Views\_ViewImports.cshtml"
using projectpayroll.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eb3aed4234e20ee368e01060ee2d29c6940ce93a", @"/Views/slipSalary/index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"55231f8b2935cf16ee23a3deb1ef016831686df2", @"/Views/_ViewImports.cshtml")]
    public class Views_slipSalary_index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div id='app1' v-cloak>
    <v-app style=""background-color:#EDF1F2;"">
        <v-main>
          <v-card>
            <v-navigation-drawer
                    permanent
                    :mini-variant.sync=""mini""
                    fixed
                    app
                    style=""background-color:#002952""
                    >
                    <v-list
                    nav
                    dense
                    >
                    <v-btn
                    icon
                    ");
            WriteLiteral(@"@click.stop=""mini = !mini""
                    >
                    <v-icon style=""color:white"">mdi-chevron-left</v-icon>
                    </v-btn>
                    <v-list-group
                            no-action
                        >
                        <v-list-item slot=""activator"">
                               <v-list-item-icon>
                              <v-icon style=""color:white"">mdi-file-multiple</v-icon>
                              </v-list-item-icon>
                            <v-list-item-title  style=""color:white"">Report</v-list-item-title>
                            </v-list-item>
                    <v-list-item ");
            WriteLiteral(@"@click='PNDkor' >
                        <v-list-item-icon>
                        <v-icon style=""color:white"">mdi-file-document</v-icon>
                        </v-list-item-icon>
                        <v-list-item-title style=""color:white"">PND1 KOR</v-list-item-title>
                    </v-list-item>
                    <v-list-item ");
            WriteLiteral(@"@click='PND'>
                        <v-list-item-icon>
                        <v-icon style=""color:white"">mdi-file-document</v-icon>
                        </v-list-item-icon>
                        <v-list-item-title style=""color:white"">PND1</v-list-item-title>
                    </v-list-item>
                     <v-list-item ");
            WriteLiteral(@"@click='v50' >
                        <v-list-item-icon>
                        <v-icon style=""color:white"">mdi-file-document</v-icon>
                        </v-list-item-icon>
                        <v-list-item-title style=""color:white"">50 TAWI</v-list-item-title>
                    </v-list-item>
                    <v-list-item ");
            WriteLiteral(@"@click='Bankreport'>
                        <v-list-item-icon>
                        <v-icon style=""color:white"">mdi-file-document</v-icon>
                        </v-list-item-icon>
                        <v-list-item-title style=""color:white"">BANK DOCUMENT</v-list-item-title>
                    </v-list-item>
                     <v-list-item ");
            WriteLiteral(@"@click='ssoreport' >
                        <v-list-item-icon>
                        <v-icon style=""color:white"">mdi-file-document</v-icon>
                        </v-list-item-icon>
                        <v-list-item-title style=""color:white"">SOCIAL SECURITY FUNDS</v-list-item-title>
                    </v-list-item>
                    </v-list-group>

                    <v-list-group
                            no-action
                        >
                            <v-list-item slot=""activator"">
                               <v-list-item-icon>
                              <v-icon style=""color:white"">mdi-file-multiple</v-icon>
                              </v-list-item-icon>
                            <v-list-item-title  style=""color:white"">SLIP MASTER</v-list-item-title>
                            </v-list-item>
                            <v-list-item ");
            WriteLiteral("@click=\'all_slip_mas\'>\n                                <v-list-item-title  style=\"color:white\">ALL SLIP MASTER</v-list-item-title>\n                            </v-list-item>\n                            <v-list-item ");
            WriteLiteral(@"@click='add_slip_mas'>
                                <v-list-item-title style=""color:white"">NEW SLIP MASTER</v-list-item-title>
                            </v-list-item>
                        </v-list-group>
                         <v-list-group
                            no-action
                        >
                            <v-list-item slot=""activator"">
                               <v-list-item-icon>
                              <v-icon style=""color:white"">mdi-home-modern</v-icon>
                              </v-list-item-icon>
                            <v-list-item-title  style=""color:white"">COMPANY</v-list-item-title>
                            </v-list-item>
                            <v-list-item ");
            WriteLiteral("@click=\'com\'>\n                                <v-list-item-title  style=\"color:white\">COMPANY INFORMATION</v-list-item-title>\n                            </v-list-item>\n                            <v-list-item ");
            WriteLiteral(@"@click='add_com'>
                                <v-list-item-title style=""color:white"">NEW INFORMATION</v-list-item-title>
                            </v-list-item>
                        </v-list-group>
                </v-navigation-drawer>
                </v-card>	
            <table>
                <tr>
                    <td>
                       <div style=""width: 200px;"">
             <v-menu
        ref=""menu""
        v-model=""menu""
        :close-on-content-click=""false""
        :return-value.sync=""date""
        transition=""scale-transition""
        offset-y
        min-width=""auto""
      >
        <template v-slot:activator=""{ on, attrs }"">
          <v-text-field
            v-model=""date""
            label=""Date:""
            readonly
            v-bind=""attrs""
            v-on=""on""
          ></v-text-field>
        </template>
        <v-date-picker
          v-model=""date""
          no-title
          scrollable
        >
          <v-spacer></v-spacer>
          <v-btn
            tex");
            WriteLiteral("t\n            color=\"primary\"\n            ");
            WriteLiteral("@click=\"menu = false\"\n          >\n            Cancel\n          </v-btn>\n          <v-btn\n            text\n            color=\"primary\"\n            ");
            WriteLiteral("@click=\"$refs.menu.save(date);selectdate()\"\n          >\n            OK\n          </v-btn>\n        </v-date-picker>\n      </v-menu>\n      </div> \n                    </td>\n                    <td>\n                        <v-btn\n            \n            ");
            WriteLiteral(@"@click=""save""
          >
            Save
          </v-btn>
                    </td>
                    
                </tr>
                
            </table>
             
             <v-data-table
             :headers ='headers'
             :items   ='slipSalary'
              class='elevation-1'
             />
                  <template v-slot:item.actions='{item}'>
                        <v-btn 
                        class=""white--text""
                        color=""blue darken-1""
                        ");
            WriteLiteral("@click=\"detail_slip(item)\"\n                        >\n                            datail\n                            \n                        </v-btn>\n                </template>\n             </v-data-table>\n        </v-main>\n    </v-app>\n</div>\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        var app;
            var component = {
                vuetify: new Vuetify()
                ,
                el:'#app1'
                ,
                data:{
                    
                   slipSalarys:[],tax:[],salary:[],ot:[],ssf:[],employee:[],all:[],slipMaster:[],earning:[],deduction:[],totalearn:[],totaldeduct:[],slip:[],et:[],sender:[],slipSalary:[]
                   ,
                   headers:[
                      {text:'Employee Name',value:'employeeName',align:'left',sortable:true},
                      {text:'Total Earning',value:'totalearning',align:'right',sortable:true},
                      {text:'Total Deduction',value:'totaldeducttion',align:'right',sortable:true},
                      {text:'Net Salary',value:'netSalary',align:'right',sortable:true},
                      {text:'Slip datail',value:'actions',align:'right',sortable:true},

					],
                    date: new Date().toISOString().substr(0, 10),
                    menu: false,
      ");
                WriteLiteral("              mini:true,\n                    \n                    \n                }//edata\n                ,\n                created(){\n                    console.log(Math.ceil(11/2))\n                  this.slipSalarys = ");
#nullable restore
#line 205 "C:\Users\max_w\Desktop\projectpayroll\Views\slipSalary\index.cshtml"
                                Write(Html.Raw(Json.Serialize(@ViewBag.slipSalarys)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.ot  = ");
#nullable restore
#line 206 "C:\Users\max_w\Desktop\projectpayroll\Views\slipSalary\index.cshtml"
                        Write(Html.Raw(Json.Serialize(@ViewBag.OTCs)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.tax  = ");
#nullable restore
#line 207 "C:\Users\max_w\Desktop\projectpayroll\Views\slipSalary\index.cshtml"
                         Write(Html.Raw(Json.Serialize(@ViewBag.taxs)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.salary  = ");
#nullable restore
#line 208 "C:\Users\max_w\Desktop\projectpayroll\Views\slipSalary\index.cshtml"
                            Write(Html.Raw(Json.Serialize(@ViewBag.CurrentSalarys)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.ssf  = ");
#nullable restore
#line 209 "C:\Users\max_w\Desktop\projectpayroll\Views\slipSalary\index.cshtml"
                         Write(Html.Raw(Json.Serialize(@ViewBag.ssfunds)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.employee  = ");
#nullable restore
#line 210 "C:\Users\max_w\Desktop\projectpayroll\Views\slipSalary\index.cshtml"
                              Write(Html.Raw(Json.Serialize(@ViewBag.employee)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.slipMaster = ");
#nullable restore
#line 211 "C:\Users\max_w\Desktop\projectpayroll\Views\slipSalary\index.cshtml"
                               Write(Html.Raw(Json.Serialize(@ViewBag.slipMasters)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
                  console.log(this.slipSalarys)
                  var mound=this.date.split(""-"");
                        var mound2={
                            day:parseInt(mound[2]),
                            month:parseInt(mound[1]),
                            year:parseInt(mound[0])
                        }
                        function numberWithCommas(x) {
                  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "","");
                  }
                   this.slipSalary=this.slipSalarys.filter(x=>x.month==mound2.month&&x.year==mound2.year)
                   for(i=0;i<this.slipSalary.length;i++){
                    this.slipSalary[i].totalearning=numberWithCommas((this.slipSalary[i].totalearning).toFixed(2))
                    this.slipSalary[i].totaldeducttion=numberWithCommas((this.slipSalary[i].totaldeducttion).toFixed(2))
                    this.slipSalary[i].netSalary=numberWithCommas((this.slipSalary[i].netSalary).toFixed(2))
                   }
                  con");
                WriteLiteral(@"sole.log(this.slipSalarys)
                  this.tax.sort((a,b) => { 
					              if(a.employeeId > b.employeeId) return 1;
					              else if(a.employeeId == b.employeeId) return 0; 
					              else return -1;
				                });
                        this.tax=this.tax.filter(x=>x.year==mound2.year)
                        this.salary=this.salary.filter(x=>x.year==mound2.year)
                        console.log(this.salary)
                    for(i=0;i<this.tax.length;i++){
                  if(this.tax[i].value!==0 && mound2.month==12){
                      var a = this.tax[i].value
                    this.tax[i].value= a-(Math.floor(this.tax[i].value/12)*11)
                  }
                  else{
                    this.tax[i].value= Math.floor(this.tax[i].value/12) 
                  }
                  }
                  
                  console.log(this.tax)
                  for(i=0;i<this.employee.length;i++){this.all.push(this.tax[i],this.salary[i],this.ssf[");
                WriteLiteral(@"i])}
                  for(i=0;i<this.ot.length;i++){this.all.push(this.ot[i])}
                  for(i=0;i<this.all.length;i++){
                      for(a=0;a<this.slipMaster.length;a++){
                        if(this.all[i].slipMasterId==this.slipMaster[a].slipMasterId){
                            if(this.slipMaster[a].slipMasterType==1){
                                this.earning.push(this.all[i])
                            }
                            else{
                                this.deduction.push(this.all[i])
                            }
                        }
                      }
                  }
                  for(i=0;i<this.employee.length;i++){
                      var totalvalue=0;
                      var totalvalue2=0;
                      for(a=0;a<this.earning.filter(x=>x.employeeId==this.employee[i].employeeId).length;a++){
                          totalvalue = this.earning.filter(x=>x.employeeId==this.employee[i].employeeId)[a].value+totalvalue
            ");
                WriteLiteral(@"          }
                      for(b=0;b<this.deduction.filter(x=>x.employeeId==this.employee[i].employeeId).length;b++){
                          totalvalue2 = this.deduction.filter(x=>x.employeeId==this.employee[i].employeeId)[b].value+totalvalue2
                      }
                      this.totalearn.push(totalvalue)
                      this.totaldeduct.push(totalvalue2)
                  }
                  for(i=0;i<this.employee.length;i++){
                      for(a=0;a<this.earning.filter(x=>x.employeeId==this.employee[i].employeeId).length;a++){
                          this.earning.filter(x=>x.employeeId==this.employee[i].employeeId)[a].slipMasterId = 
                         this.slipMaster.filter(x=>x.slipMasterId==this.earning.filter(x=>x.employeeId==this.employee[i].employeeId)[a].slipMasterId)[0].slipMasterName
                      }
                      var p={
                          employeeName   : this.employee[i].firstName+"" ""+this.employee[i].lastName,
               ");
                WriteLiteral(@"           earnT          : this.earning.filter(x=>x.employeeId==this.employee[i].employeeId)

                      }
                      this.slip.push(p)
                  }
                  
                  
                  
                }//ecreated
                ,
                methods:{
                    
                    
                    
                    detail_slip(item){
                        var mound=this.date.split(""-"");
                            var mound2={
                            day:parseInt(mound[2]),
                            month:parseInt(mound[1]),
                            year:parseInt(mound[0])
                            }
                            var a =parseInt(item.employeeId.toString()+""99""+mound2.month.toString())
                            console.log(a)
                        //window.location = '/slipsalary/slip/'+item.employeeId+""99""+mound2.month+""99""+mound2.year;
                        window.location = '/slipsalary/slip/'+a;
    ");
                WriteLiteral(@"                }
                    ,
                    save(){
                      var mound=this.date.split(""-"");
                            var mound2={
                            day:parseInt(mound[2]),
                            month:parseInt(mound[1]),
                            year:parseInt(mound[0])
                            }
                      for(i=0;i<this.employee.length;i++){
                      var p = {
                          employeeId            : this.employee[i].employeeId,
                          Totalearning          : this.totalearn[i],
                          Totaldeducttion       : this.totaldeduct[i],
                          NetSalary             : this.totalearn[i]-this.totaldeduct[i],
                          Month                 : mound2.month,
                          Year                  : mound2.year
                      }
                      this.sender.push(p)
                  }
                 console.log(this.sender)
                    ");
                WriteLiteral(@"  var url = '/slipsalary/Edit';
                        var param= this.sender;
                        for(i=0;i<param.length;i++){
                        $.post(url,param[i])
                        .done(res =>{
                          if(res.error == -1){
                               window.location = '/slipsalary/index';
                          }
                          else{ 
                             alert(res.exception);
                          }
                    });
                        }
                    }
                    ,
                    PNDkor(){
                         window.open(""/slipsalary/export1"", '_blank');
                    }
                    ,
                     PND_K(){
                         window.location =""/slipsalary/export1"";
                    } 
                    ,
                    PND(){
                         window.open(""/slipsalary/PND"", '_blank');
                    } 
                    ,
                     ssoreport(){");
                WriteLiteral(@"
                        window.location =""/slipsalary/ssoreport"";
                    }
                    ,
                     v50(){
                       window.open(""/slipsalary/v50"", '_blank')
                         
                    } 
                    ,
                    tawi_50(){
                      window.location =""/slipsalary/export4"";
                   }
                   ,
                   all_slip_mas(){
                     window.location =""/slipmaster/index"";
                   }
                   ,
                   add_slip_mas(){
                      window.location =""/slipmaster/add"";
                   }
                  ,
                  com(){
                     window.location =""/managerinfo/index"";
                  }
                  ,
                   add_com(){
                     window.location =""/managerinfo/add"";
                  }
                  ,
                    Bankreport(){
                            var mound=this.date.split(""-"")");
                WriteLiteral(@";
                            var mound2={
                            day:parseInt(mound[2]),
                            month:parseInt(mound[1]),
                            year:parseInt(mound[0])
                        }
                       window.location =""/slipsalary/BankReport/""+mound2.month;
                    }
                    ,
                    selectdate(){
                      function numberWithCommas(x) {
                  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "","");
                  }
                      var mound=this.date.split(""-"");
                        var mound2={
                            day:parseInt(mound[2]),
                            month:parseInt(mound[1]),
                            year:parseInt(mound[0])
                        }
                        this.slipSalary=[]
                        
                        this.slipSalary=this.slipSalarys.filter(x=>x.month==mound2.month&&x.year==mound2.year)
                   for(i=0;i<this.s");
                WriteLiteral(@"lipSalary.length;i++){
                    this.slipSalary[i].totalearning=numberWithCommas((this.slipSalary[i].totalearning).toFixed(2))
                    this.slipSalary[i].totaldeducttion=numberWithCommas((this.slipSalary[i].totaldeducttion).toFixed(2))
                    this.slipSalary[i].netSalary=numberWithCommas((this.slipSalary[i].netSalary).toFixed(2))
                   }
                  console.log(this.slipSalarys)
                    }
                    

                }//emethods
                ,
                computed:{

                }//ecomputed
            };
            app = new Vue(component);


    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
