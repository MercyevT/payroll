#pragma checksum "C:\Users\max_w\Desktop\projectpayroll\Views\OT\index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bb919a009f56ed41615833989bd327aa1a91eb43"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_OT_index), @"mvc.1.0.view", @"/Views/OT/index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\max_w\Desktop\projectpayroll\Views\_ViewImports.cshtml"
using projectpayroll;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\max_w\Desktop\projectpayroll\Views\_ViewImports.cshtml"
using projectpayroll.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bb919a009f56ed41615833989bd327aa1a91eb43", @"/Views/OT/index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"55231f8b2935cf16ee23a3deb1ef016831686df2", @"/Views/_ViewImports.cshtml")]
    public class Views_OT_index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<nav aria-label=""breadcrumb"">
    <ol class=""breadcrumb breadcrumb-arrow"">
        <li class=""breadcrumb-item active"" aria-current=""page"">oT</li>
    </ol>
</nav>
<div id='app1' v-cloak>

    <v-app>
        <v-main>
            
            <v-container
            >
            <v-row
             justify=""space-around""
            >
             <v-btn
              ");
            WriteLiteral("@click=\'add_ot\'\n             >\n                 <v-icon>\n                   mdi-plus\n                 </v-icon>\n                 \n             </v-btn>\n             <v-btn\n              ");
            WriteLiteral("@click=\'import_ot\'\n             >\n                   import file\n                 \n             </v-btn>\n             <v-btn\n          ");
            WriteLiteral("@click=\"overlay = !overlay\"\n        >\n          Select Date: {{date}}\n        </v-btn>\n\n        <v-overlay\n          :value=\"overlay\"\n        >\n        <v-date-picker v-model=\"date\"/>\n          <v-btn\n           ");
            WriteLiteral("@click=\"overlay = false;add_date(); \"\n          >\n            Submit\n          </v-btn>\n        </v-overlay>\n            <input class=\"text\" v-model=\"lmin\" placeholder=\"minute late allow\">\n          \n             <v-btn\n              ");
            WriteLiteral("@click=\'math\'\n             >\n                 Mathing OT\n                 \n             </v-btn>\n             <v-btn\n              ");
            WriteLiteral(@"@click='calOt'
             >
                 Calculator OT
                 
             </v-btn>
             </v-row>
             </v-container>
             <v-data-table
             :headers ='headers'
             :items   ='oTs2'
              class='elevation-1'
             />
                  <template v-slot:item.actions='{item}'>
                        <v-btn 
                        class=""white--text""
                        color=""blue darken-1""
                        ");
            WriteLiteral("@click=\"edit_ot(item)\"\n                        >\n                            Check    \n                        </v-btn>\n                </template>\n             </v-data-table>\n        </v-main>\n    </v-app>\n</div>\n\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        var app;
        
            var component = {
                
                
                vuetify: new Vuetify()
                ,
                el:'#app1'
                ,
                
                data:{
                    
                         absolute: true,
                        overlay: false,
                        
                    
              
                   oTs:[],Clocking:[],clockings:[],ot:[],startTimes:[],startTime:[],check:[],month:[],oTcs:[],date2:[],oTs2:[],endtime:[],endtimes:[]
                   ,
                   headers:[

                      {text:'employeeId',value:'employeeId',align:'center',sortable:true},

                      {text:'oTStart',value:'oTStart',align:'center',sortable:true},
                      {text:'oTFinish',value:'oTFinish',align:'center',sortable:true},
                      {text:'oTDate',value:'oTDate',align:'center',sortable:true},
                      {text:'TotalHour',value:'totalHour',align:'ce");
                WriteLiteral(@"nter',sortable:true},
                      {text:'oStatus',value:'oStatus',align:'center',sortable:true},
                      {text:'actions',value:'actions',align:'center',sortable:true}

					]
                    ,
                     date:null,
                     lmin:null
                    
                    
                }//edata    
                
                ,
                created(){
                    
                    absolute= true,
                    overlay= false,
                  this.oTs = ");
#nullable restore
#line 126 "C:\Users\max_w\Desktop\projectpayroll\Views\OT\index.cshtml"
                        Write(Html.Raw(Json.Serialize(@ViewBag.oTs)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.oTs2 = this.oTs;\n                  this.clocking = ");
#nullable restore
#line 128 "C:\Users\max_w\Desktop\projectpayroll\Views\OT\index.cshtml"
                             Write(Html.Raw(Json.Serialize(@ViewBag.clockings)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
                  for(a=0;a<this.oTs.length;a++){
                      this.startTimes.push(this.oTs[a].oTStart.split("":""));
                      this.endtimes.push(this.oTs[a].oTFinish.split("":""));
                    for(i=0;i<this.clocking.length;i++){
                        if(this.oTs[a].employeeId==this.clocking[i].employeeId){
                            if(this.oTs[a].oTStart.split("":"")[0]==this.clocking[i].clockingIn.split("":"")[0]
                            &&this.oTs[a].oTFinish.split("":"")[0]==this.clocking[i].clockingOut.split("":"")[0]){
                            this.startTime.push(this.clocking[i])
                        }
                    }
                
                    }     
                  }                  
                  console.log(this.oTs);
                  console.log(this.clocking);
                  console.log(this.oTs[0].oTStart.split("":""));
                  console.log(this.startTime);
                  console.log(this.oTFinish);
                 
       ");
                WriteLiteral(@"           
                 
                  
                }//ecreated
                ,
                methods:{
                    add_date(){
                        var mound=this.date.split(""-"");
                        var mound2={
                            day:mound[2],
                            month:mound[1],
                            year:mound[0]
                        }
                        this.oTs2=this.oTs.filter(x=>x.oTDate==mound2.day+""/""+mound2.month+""/""+mound2.year)
                        console.log(this.oTs2)
                    }
                    ,
                    add_ot(){
                        window.location= '/ot/add';
                  
                        
                    }//ef
                    ,
                    math(){
                            console.log(parseInt(this.lmin))
                            for(i=0;i<this.oTs.length;i++){
                                for(a=0;a<this.startTime.length;a++){
                                ");
                WriteLiteral(@"if(this.oTs[i].employeeId==this.startTime[a].employeeId&&parseInt(this.startTime[a].clockingIn.split("":"")[1])<=parseInt(this.lmin)){
                                       this.check={
                                           oTId         :   this.oTs[i].oTId,
                                           employeeId   :   this.oTs[i].employeeId,
                                           oTStart      :   this.oTs[i].oTStart,
                                           oTFinish     :   this.oTs[i].oTFinish,
                                           oTDate       :   this.oTs[i].oTDate,
                                           totalHour    :   this.oTs[i].totalHour,
                                           oStatus      :   ""complete""
                                       }
                                        var url = '/ot/update';
                                        var param= this.check;
                                         $.post(url,param)
                                         .done(res =>");
                WriteLiteral(@"{
                                        if(res.error == -1){
                                        window.location = '/ot/index';
                                        }
                                        else{
                                        alert(res.exception);
                                        }
                                        });
                               }
                                }
                           }
                           console.log(this.check)
                    }
                    ,
                    calOt(){
                        var oTc = this.oTs.filter(x=>x.oStatus==""complete"");
                        
                        for(i=0;i<oTc.length;i++){
                            this.month.push(oTc[i].oTDate.split(""/"")); 
                            var p = {
                                oTId    :   oTc[i].oTId,
                                month   :   this.month[i][1],
                                value   :   oTc[i].t");
                WriteLiteral(@"otalHour*100,
                                years   :   parseInt(this.month[i][2])
                           }
                           this.oTcs.push(p);
                        }
                        console.log(this.oTcs);
                        window.location = '/otc/index';
                        
                    }
                    ,
                    edit_ot(item){
                        window.location = '/ot/check/'+item.oTId;
                    }
                    ,
                    import_ot(item){
                        window.location= '/ot/importview';
                    }
                    ,
                }//emethods
                ,
                computed:{

                }//ecomputed
            };
            app = new Vue(component);
           
    
 
    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
