#pragma checksum "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "254e3c953b1cbe322e67ce0ce1743253fe8d79f5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Tax_index), @"mvc.1.0.view", @"/Views/Tax/index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\max_w\Desktop\projectpayroll\Views\_ViewImports.cshtml"
using projectpayroll;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\max_w\Desktop\projectpayroll\Views\_ViewImports.cshtml"
using projectpayroll.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"254e3c953b1cbe322e67ce0ce1743253fe8d79f5", @"/Views/Tax/index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"55231f8b2935cf16ee23a3deb1ef016831686df2", @"/Views/_ViewImports.cshtml")]
    public class Views_Tax_index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb breadcrumb-arrow\">\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">tax</li>\n    </ol>\n</nav>\n<div id=\'app1\' v-cloak>\n\n    <v-app>\n        <v-main>\n             <v-btn\n              ");
            WriteLiteral(@"@click='add_tax2'
             >
                 <v-icon>
                   mdi-plus
                 </v-icon>
                 
             </v-btn>
             <v-data-table
             :headers ='headers'
             :items   ='taxPY'
              class='elevation-1'
             />
                  <template v-slot:item.actions='{item}'>
                        <v-btn 
                        class=""white--text""
                        color=""blue darken-1""
                        ");
            WriteLiteral(@"@click=""edit_tax(item)""
                        >
                            <v-icon>
                            mdi-pencil
                            </v-icon>
                            
                        </v-btn>
                </template>
             </v-data-table>
        </v-main>
    </v-app>
</div>
");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        var app;
            var component = {
                vuetify: new Vuetify()
                ,
                el:'#app1'
                ,
                data:{
              
                   taxs:[],Salary:[],EmployeeInfos:[],tax:[],employees:[],CurrentSalary:[],totaltaxb:[],CostDeduction:[],tax:[],taxPY:[]
                   ,
                   headers:[

                      {text:'employeeId',value:'employeeId',align:'center',sortable:true},

                      {text:'netSalary',value:'netSalary',align:'center',sortable:true},
                      {text:'taxY',value:'taxY',align:'center',sortable:true},
                      {text:'year',value:'year',align:'center',sortable:true},
                      {text:'actions',value:'actions',align:'center',sortable:true}

					]
                }//edata
                ,
                created(){
                  
                  var years = new Date().getFullYear();
                  var sum = 0;
                  this.taxPY");
                WriteLiteral(" = ");
#nullable restore
#line 67 "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml"
                          Write(Html.Raw(Json.Serialize(@ViewBag.taxs)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.CurrentSalarys = ");
#nullable restore
#line 68 "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml"
                                   Write(Html.Raw(Json.Serialize(@ViewBag.CurrentSalarys)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.EmployeeInfos = ");
#nullable restore
#line 69 "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml"
                                  Write(Html.Raw(Json.Serialize(@ViewBag.EmployeeInfos)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.employees = ");
#nullable restore
#line 70 "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml"
                              Write(Html.Raw(Json.Serialize(@ViewBag.employees)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
                  this.CurrentSalary=this.CurrentSalarys.filter(x=>x.year==years)
                  .sort((a,b) => { 
					if(a.employeeId > b.employeeId) return 1;
					else if(a.employeeId == b.employeeId) return 0;
					else return -1;
				    });
                    console.log(this.EmployeeInfos)
                    for(i=0;i<this.employees.length;i++){
                        var SelectEmp = this.EmployeeInfos.filter(x=>x.employeeId==this.employees[i].employeeId)
                    if(SelectEmp.length>1){
                        var sum = 0;
                        for(a=0;a<SelectEmp.length;a++){
                                sum = sum+SelectEmp[a].value;
                        }
                         this.totaltaxb.push(sum)
                    }
                    else{
                            this.totaltaxb.push(SelectEmp[0].value)
                    }
                    }
                    
                    for(i=0;i<this.employees.length;i++){
                        var years");
                WriteLiteral(@"alary =(this.CurrentSalary[i].currentSalaryAmount*12)
                        if(yearsalary/2<=100000){
                            this.CostDeduction.push(yearsalary/2)
                        }
                        else{
                            this.CostDeduction.push(100000)
                        }
                    }
                    for(i=0;i<this.employees.length;i++){
                        var netS = this.CurrentSalary[i].currentSalaryAmount*12-this.CostDeduction[i]-this.totaltaxb[i]
                        if(netS>150000){
                             if(netS>300000){
                                if(netS>500000){
                                    if(netS>750000){
                                        if(netS>1000000){
                                            if(netS>2000000){
                                                if(netS>5000000){
                                                    this.tax.push(((netS-5000000)*0.35)+1265000)
                                        ");
                WriteLiteral(@"        }
                                                else{
                                                    this.tax.push(((netS-2000000)*0.3)+365000)
                                                }
                                            }
                                            else{
                                                this.tax.push(((netS-1000000)*0.25)+115000)
                                            }
                                        }
                                        else{
                                            this.tax.push(((netS-750000)*0.2)+65000)
                                        }
                                    }
                                    else{
                                        this.tax.push(((netS-500000)*0.15)+27500)
                                    }
                                }
                                else{
                                    this.tax.push(((netS-300000)*0.1)+7500)
                  ");
                WriteLiteral(@"              }   
                                }
                            else{
                                this.tax.push((netS-150000)*0.05)
                            }   
                        }
                        else{
                            
                            this.tax.push(0)
                        }
                    }
                  for(i=0;i<this.employees.length;i++){
                      
                     var p={
                            employeeId          :   this.employees[i].employeeId,
                            netSalary           :   this.CurrentSalary[i].currentSalaryAmount*12-this.CostDeduction[i]-this.totaltaxb[i],
                            taxY                :   this.tax[i],
                            year                :   years.toString()
                  } 
                  this.taxs.push(p)
                  }
                  console.log(this.CurrentSalary)
                  console.log(this.totaltaxb)
                  console");
                WriteLiteral(@".log(this.tax)                  
                }//ecreated
                ,
                methods:{
                    add_tax(){
                        window.location= '/tax/add';
                  
                        
                    }//ef
                    ,
                    add_tax2(){
                        var url = '/tax/edit';
                        var param= this.taxs;
                        for(i=0;i<param.length;i++){
                        $.post(url,param[i])
                        .done(res =>{
                          if(res.error == -1){
                               window.location = '/tax/index';
                          }
                          else{
                             alert(res.exception);
                          }
                    });
                        }
                  
                        
                    }//ef
                    ,
                    edit_tax(item){
                        window.location = '/tax/edit/'+");
                WriteLiteral("item.taxId;\n                    }\n\n                }//emethods\n                ,\n                computed:{\n\n                }//ecomputed\n            };\n            app = new Vue(component);\n\n\n    </script>\n\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
