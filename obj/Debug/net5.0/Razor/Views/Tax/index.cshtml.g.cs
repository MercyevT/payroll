#pragma checksum "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2cea2848c566c614f8d9e5e8c345d3622721fa82"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Tax_index), @"mvc.1.0.view", @"/Views/Tax/index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\max_w\Desktop\projectpayroll\Views\_ViewImports.cshtml"
using projectpayroll;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\max_w\Desktop\projectpayroll\Views\_ViewImports.cshtml"
using projectpayroll.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2cea2848c566c614f8d9e5e8c345d3622721fa82", @"/Views/Tax/index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"55231f8b2935cf16ee23a3deb1ef016831686df2", @"/Views/_ViewImports.cshtml")]
    public class Views_Tax_index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div id='app1' v-cloak>

    <v-app>
        <v-main>
            <v-card>
            <v-navigation-drawer
                    permanent
                    :mini-variant.sync=""mini""
                    fixed
                    app
                    style=""background-color:#002952""
                    >
                    <v-list
                    nav
                    dense
                    >
                    <v-btn
                    icon
                    ");
            WriteLiteral("@click.stop=\"mini = !mini\"\n                    >\n                    <v-icon style=\"color:white\">mdi-chevron-left</v-icon>\n                    </v-btn>\n                    <v-list-item ");
            WriteLiteral(@"@click='taxIndex' >
                        <v-list-item-icon>
                        <v-icon style=""color:white"">mdi-file-document</v-icon>
                        </v-list-item-icon>
                        <v-list-item-title style=""color:white"">TAX</v-list-item-title>
                    </v-list-item>
                        
                          <v-list-group
                            no-action
                        >
                            <v-list-item slot=""activator"">
                               <v-list-item-icon>
                              <v-icon style=""color:white"">mdi-file-multiple</v-icon>
                              </v-list-item-icon>
                            <v-list-item-title  style=""color:white"">TAX ALLOWANCE</v-list-item-title>
                            </v-list-item>
                            <v-list-item ");
            WriteLiteral("@click=\'tax_break\'>\n                                <v-list-item-title  style=\"color:white\">ALL TAX ALLOWANCE</v-list-item-title>\n                            </v-list-item>\n                            <v-list-item ");
            WriteLiteral(@"@click='add_tax_break'>
                                <v-list-item-title style=""color:white"">NEW TAX ALLOWANCE</v-list-item-title>
                            </v-list-item>
                        </v-list-group>
                </v-navigation-drawer>
                </v-card>

             
             
            <div style=""margin:20px;""> 
                <v-card-title class=""white--text"" style=""background-color:#001f3d;"">
                        <h3 style=""text-align: center"">TAX INFORMATION</h3>
            </v-card-title>
            <v-btn
              ");
            WriteLiteral(@"@click='add_tax2'
             >
                 Generate
                 
             </v-btn>
             <v-data-table
             :headers ='headers'
             :items   ='taxPYs'
              class='elevation-1'
             />
                  <template v-slot:item.actions='{item}'>
                        <v-btn 
                        class=""white--text""
                        color=""blue darken-1""
                        ");
            WriteLiteral(@"@click=""edit_tax(item)""
                        >
                            <v-icon>
                            mdi-pencil
                            </v-icon>
                            
                        </v-btn>
                </template>
             </v-data-table>
             
        </v-main>
    </v-app>
    
</div>

  
");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        var app;
            var component = {
                vuetify: new Vuetify()
                ,
                el:'#app1'
                ,
                data:{
              
                   taxs:[],Salary:[],EmployeeInfos:[],tax:[],employees:[],CurrentSalary:[],totaltaxb:[],CostDeduction:[],tax:[],taxPY:[],taxPYs:[]
                   ,
                   headers:[

                      {text:'Employee Name',value:'employeeName',align:'left',sortable:true},

                      {text:'Net Salary',value:'netSalary',align:'right',sortable:true},
                      {text:'Tax(Year)',value:'taxY',align:'right',sortable:true},
                      {text:'Year',value:'year',align:'right',sortable:true},
                      

					],
                    mini:true,
                }//edata
                ,
                created(){
                  
                  var years = new Date().getFullYear();
                  var sum = 0;
                  this.taxPY = ");
#nullable restore
#line 116 "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml"
                          Write(Html.Raw(Json.Serialize(@ViewBag.taxs)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.CurrentSalarys = ");
#nullable restore
#line 117 "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml"
                                   Write(Html.Raw(Json.Serialize(@ViewBag.CurrentSalarys)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.EmployeeInfos = ");
#nullable restore
#line 118 "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml"
                                  Write(Html.Raw(Json.Serialize(@ViewBag.EmployeeInfos)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n                  this.employees = ");
#nullable restore
#line 119 "C:\Users\max_w\Desktop\projectpayroll\Views\Tax\index.cshtml"
                              Write(Html.Raw(Json.Serialize(@ViewBag.employees)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
                  console.log(this.taxPY)
                  this.CurrentSalary=this.CurrentSalarys.filter(x=>x.year==years)
                  .sort((a,b) => { 
					if(a.employeeId > b.employeeId) return 1;
					else if(a.employeeId == b.employeeId) return 0;
					else return -1;
				    });
                    this.taxPYs=this.taxPY
                    for(i=0;i<this.employees.length;i++){
                        this.taxPYs[i].netSalary=numberWithCommas(this.taxPY[i].netSalary.toFixed(2))
                        this.taxPYs[i].taxY=numberWithCommas(this.taxPY[i].taxY.toFixed(2))
                    }
                    function numberWithCommas(x) {
                  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "","");
                  }
                    console.log(this.CurrentSalary)
                    for(i=0;i<this.employees.length;i++){
                        var SelectEmp = this.EmployeeInfos.filter(x=>x.employeeId==this.employees[i].employeeId)
                    if(SelectEmp.length>1");
                WriteLiteral(@"){
                        var sum = 0;
                        for(a=0;a<SelectEmp.length;a++){
                                sum = sum+SelectEmp[a].value;
                        }
                         this.totaltaxb.push(sum)
                    }
                    else{
                            this.totaltaxb.push(SelectEmp[0].value)
                    }
                    }
                    
                    for(i=0;i<this.employees.length;i++){
                        var yearsalary =(this.CurrentSalary[i].currentSalaryAmount*12)
                        if(yearsalary/2<=100000){
                            this.CostDeduction.push(yearsalary/2)
                        }
                        else{
                            this.CostDeduction.push(100000)
                        }
                    }
                    for(i=0;i<this.employees.length;i++){
                        var netS = this.CurrentSalary[i].currentSalaryAmount*12-this.CostDeduction[i]-this.totaltaxb[i]
     ");
                WriteLiteral(@"                   if(netS>150000){
                             if(netS>300000){
                                if(netS>500000){
                                    if(netS>750000){
                                        if(netS>1000000){
                                            if(netS>2000000){
                                                if(netS>5000000){
                                                    this.tax.push(((netS-5000000)*0.35)+1265000)
                                                }
                                                else{
                                                    this.tax.push(((netS-2000000)*0.3)+365000)
                                                }
                                            }
                                            else{
                                                this.tax.push(((netS-1000000)*0.25)+115000)
                                            }
                                        }
                                ");
                WriteLiteral(@"        else{
                                            this.tax.push(((netS-750000)*0.2)+65000)
                                        }
                                    }
                                    else{
                                        this.tax.push(((netS-500000)*0.15)+27500)
                                    }
                                }
                                else{
                                    this.tax.push(((netS-300000)*0.1)+7500)
                                }   
                                }
                            else{
                                this.tax.push((netS-150000)*0.05)
                            }   
                        }
                        else{
                            
                            this.tax.push(0)
                        }
                    }
                  for(i=0;i<this.employees.length;i++){
                      
                     var p={
                            employeeId       ");
                WriteLiteral(@"   :   this.employees[i].employeeId,
                            netSalary           :   this.CurrentSalary[i].currentSalaryAmount*12-this.CostDeduction[i]-this.totaltaxb[i],
                            taxY                :   this.tax[i],
                            year                :   years.toString()
                  } 
                  this.taxs.push(p)
                  }
                  for(i=0;i<this.employees.length;i++){
                      if(this.taxs[i].netSalary<=0){
                        this.taxs[i].netSalary=0
                      }
                      
                  }
                  console.log(this.totaltaxb[0])
                  console.log(this.totaltaxb)
                  console.log(this.tax)                  
                }//ecreated
                ,
                methods:{
                    add_tax(){
                        window.location= '/tax/add';
                  
                        
                    }//ef
                    ,
            ");
                WriteLiteral(@"        add_tax2(){
                        var url = '/tax/edit';
                        var param= this.taxs;
                        for(i=0;i<param.length;i++){
                        $.post(url,param[i])
                        .done(res =>{
                          if(res.error == -1){
                               window.location = '/tax/index';
                          }
                          else{
                             alert(res.exception);
                          }
                    });
                        }
                  
                        
                    }//ef
                    ,
                    edit_tax(item){
                        window.location = '/tax/edit/'+item.taxId;
                    }
                    ,
                    taxIndex(){
                        window.location = '/tax/index/';
                    }
                    ,
                    emp_tax_break(){
                         window.location = '/employeeinfo/index/';
");
                WriteLiteral(@"                    }
                    ,
                    add_emp_tax_break(){
                            window.location = '/employeeinfo/add/';
                    }
                    ,
                    tax_break(){
                            window.location = '/infomaster/index/';
                    }
                    ,
                    add_tax_break(){
                            window.location = '/infomaster/add/';
                    }

                }//emethods
                ,
                computed:{

                }//ecomputed
            };
            app = new Vue(component);


    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
