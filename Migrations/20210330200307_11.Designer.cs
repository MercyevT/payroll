// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projectpayroll.Data;

namespace projectpayroll.Migrations
{
    [DbContext(typeof(projectpayrollDbContext))]
    [Migration("20210330200307_11")]
    partial class _11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("projectpayroll.Data.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("projectpayroll.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("department")
                        .HasColumnType("longtext");

                    b.Property<string>("first_name")
                        .HasColumnType("longtext");

                    b.Property<string>("last_name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("projectpayroll.Models.CurrentSalary", b =>
                {
                    b.Property<int>("currentSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("currentSalaryAmount")
                        .HasColumnType("double");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<int>("employeeSalaryMasterId")
                        .HasColumnType("int");

                    b.Property<string>("month")
                        .HasColumnType("longtext");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("currentSalaryId");

                    b.HasIndex("employeeId");

                    b.HasIndex("employeeSalaryMasterId");

                    b.ToTable("CurrentSalarys");
                });

            modelBuilder.Entity("projectpayroll.Models.EmployeeInfo", b =>
                {
                    b.Property<int>("employeeInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("InfoMasterId")
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.HasKey("employeeInfoId");

                    b.HasIndex("InfoMasterId");

                    b.HasIndex("employeeId");

                    b.ToTable("EmployeeInfos");
                });

            modelBuilder.Entity("projectpayroll.Models.EmployeeSalaryMaster", b =>
                {
                    b.Property<int>("employeeSalaryMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("basicSalary")
                        .HasColumnType("double");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("employeestatus")
                        .HasColumnType("longtext");

                    b.Property<string>("position")
                        .HasColumnType("longtext");

                    b.Property<double>("salaryRate")
                        .HasColumnType("double");

                    b.HasKey("employeeSalaryMasterId");

                    b.HasIndex("departmentId");

                    b.ToTable("EmployeeSalaryMasters");
                });

            modelBuilder.Entity("projectpayroll.Models.InfoMaster", b =>
                {
                    b.Property<int>("InfoMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("information")
                        .HasColumnType("longtext");

                    b.Property<double>("value")
                        .HasColumnType("double");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("InfoMasterId");

                    b.ToTable("InfoMasters");
                });

            modelBuilder.Entity("projectpayroll.Models.ManagerInfo", b =>
                {
                    b.Property<int>("managerInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("managerAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("managerCZId")
                        .HasColumnType("longtext");

                    b.Property<string>("managerCode")
                        .HasColumnType("longtext");

                    b.Property<string>("managerInfoFname")
                        .HasColumnType("longtext");

                    b.Property<string>("managerInfoLname")
                        .HasColumnType("longtext");

                    b.HasKey("managerInfoId");

                    b.ToTable("ManagerInfos");
                });

            modelBuilder.Entity("projectpayroll.Models.OT", b =>
                {
                    b.Property<int>("oTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TotalHour")
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("oStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("oTDate")
                        .HasColumnType("longtext");

                    b.Property<string>("oTFinish")
                        .HasColumnType("longtext");

                    b.Property<string>("oTStart")
                        .HasColumnType("longtext");

                    b.HasKey("oTId");

                    b.HasIndex("employeeId");

                    b.ToTable("OTs");
                });

            modelBuilder.Entity("projectpayroll.Models.OTC", b =>
                {
                    b.Property<int>("oTCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("month")
                        .HasColumnType("longtext");

                    b.Property<int>("oTId")
                        .HasColumnType("int");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.Property<int>("years")
                        .HasColumnType("int");

                    b.HasKey("oTCId");

                    b.HasIndex("oTId");

                    b.ToTable("OTCs");
                });

            modelBuilder.Entity("projectpayroll.Models.OTrate", b =>
                {
                    b.Property<int>("oTrateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("position")
                        .HasColumnType("longtext");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("oTrateId");

                    b.HasIndex("departmentId");

                    b.ToTable("OTrates");
                });

            modelBuilder.Entity("projectpayroll.Models.bank", b =>
                {
                    b.Property<int>("bankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("bankName")
                        .HasColumnType("longtext");

                    b.HasKey("bankId");

                    b.ToTable("banks");
                });

            modelBuilder.Entity("projectpayroll.Models.clocking", b =>
                {
                    b.Property<int>("clockingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("longtext");

                    b.Property<string>("breakIn")
                        .HasColumnType("longtext");

                    b.Property<string>("breakOut")
                        .HasColumnType("longtext");

                    b.Property<string>("clockingIn")
                        .HasColumnType("longtext");

                    b.Property<string>("clockingOut")
                        .HasColumnType("longtext");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.HasKey("clockingId");

                    b.HasIndex("employeeId");

                    b.ToTable("clockings");
                });

            modelBuilder.Entity("projectpayroll.Models.department", b =>
                {
                    b.Property<int>("departmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("departmentName")
                        .HasColumnType("longtext");

                    b.HasKey("departmentId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("projectpayroll.Models.employee", b =>
                {
                    b.Property<int>("employeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("BankAccount")
                        .HasColumnType("longtext");

                    b.Property<string>("CitizenID")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("PassportNo")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.Property<int>("bankId")
                        .HasColumnType("int");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.HasKey("employeeId");

                    b.HasIndex("bankId");

                    b.HasIndex("departmentId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("projectpayroll.Models.slipMaster", b =>
                {
                    b.Property<int>("slipMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("slipMasterName")
                        .HasColumnType("longtext");

                    b.Property<int>("slipMasterType")
                        .HasColumnType("int");

                    b.HasKey("slipMasterId");

                    b.ToTable("slipMasters");
                });

            modelBuilder.Entity("projectpayroll.Models.slipSalary", b =>
                {
                    b.Property<int>("slipSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .HasColumnType("longtext");

                    b.Property<double>("NetSalary")
                        .HasColumnType("double");

                    b.Property<double>("Totaldeducttion")
                        .HasColumnType("double");

                    b.Property<double>("Totalearning")
                        .HasColumnType("double");

                    b.Property<string>("Year")
                        .HasColumnType("longtext");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.HasKey("slipSalaryId");

                    b.HasIndex("employeeId");

                    b.ToTable("slipSalarys");
                });

            modelBuilder.Entity("projectpayroll.Models.ssfund", b =>
                {
                    b.Property<int>("ssfundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("amountE")
                        .HasColumnType("int");

                    b.Property<int>("amountM")
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("month")
                        .HasColumnType("longtext");

                    b.Property<double>("ssfundER")
                        .HasColumnType("double");

                    b.Property<double>("ssfundMR")
                        .HasColumnType("double");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("ssfundId");

                    b.HasIndex("employeeId");

                    b.ToTable("ssfunds");
                });

            modelBuilder.Entity("projectpayroll.Models.tax", b =>
                {
                    b.Property<int>("taxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<double>("netSalary")
                        .HasColumnType("double");

                    b.Property<double>("taxY")
                        .HasColumnType("double");

                    b.Property<string>("year")
                        .HasColumnType("longtext");

                    b.HasKey("taxId");

                    b.HasIndex("employeeId");

                    b.ToTable("taxs");
                });

            modelBuilder.Entity("projectpayroll.Models.workingTime", b =>
                {
                    b.Property<int>("workingTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("finish")
                        .HasColumnType("longtext");

                    b.Property<string>("start")
                        .HasColumnType("longtext");

                    b.HasKey("workingTimeId");

                    b.HasIndex("departmentId");

                    b.ToTable("workingTimes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("projectpayroll.Data.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("projectpayroll.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("projectpayroll.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("projectpayroll.Data.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectpayroll.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("projectpayroll.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.CurrentSalary", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectpayroll.Models.EmployeeSalaryMaster", "employeesalarymaster")
                        .WithMany()
                        .HasForeignKey("employeeSalaryMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("employeesalarymaster");
                });

            modelBuilder.Entity("projectpayroll.Models.EmployeeInfo", b =>
                {
                    b.HasOne("projectpayroll.Models.InfoMaster", "InfoMaster")
                        .WithMany()
                        .HasForeignKey("InfoMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("InfoMaster");
                });

            modelBuilder.Entity("projectpayroll.Models.EmployeeSalaryMaster", b =>
                {
                    b.HasOne("projectpayroll.Models.department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("projectpayroll.Models.OT", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("projectpayroll.Models.OTC", b =>
                {
                    b.HasOne("projectpayroll.Models.OT", "OT")
                        .WithMany()
                        .HasForeignKey("oTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OT");
                });

            modelBuilder.Entity("projectpayroll.Models.OTrate", b =>
                {
                    b.HasOne("projectpayroll.Models.department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("projectpayroll.Models.clocking", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("projectpayroll.Models.employee", b =>
                {
                    b.HasOne("projectpayroll.Models.bank", "bank")
                        .WithMany()
                        .HasForeignKey("bankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectpayroll.Models.department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bank");

                    b.Navigation("department");
                });

            modelBuilder.Entity("projectpayroll.Models.slipSalary", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("projectpayroll.Models.ssfund", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("projectpayroll.Models.tax", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("projectpayroll.Models.workingTime", b =>
                {
                    b.HasOne("projectpayroll.Models.department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });
#pragma warning restore 612, 618
        }
    }
}
