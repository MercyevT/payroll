// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projectpayroll.Data;

namespace projectpayroll.Migrations
{
    [DbContext(typeof(projectpayrollDbContext))]
    [Migration("20210326101843_3")]
    partial class _3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("projectpayroll.Models.CurrentSalary", b =>
                {
                    b.Property<int>("currentSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("currentSalaryAmount")
                        .HasColumnType("double");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<int>("employeeSalaryMasterId")
                        .HasColumnType("int");

                    b.Property<string>("month")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("currentSalaryId");

                    b.HasIndex("employeeId");

                    b.HasIndex("employeeSalaryMasterId");

                    b.ToTable("CurrentSalarys");
                });

            modelBuilder.Entity("projectpayroll.Models.EmployeeInfo", b =>
                {
                    b.Property<int>("employeeInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("InfoMasterId")
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.HasKey("employeeInfoId");

                    b.HasIndex("InfoMasterId");

                    b.HasIndex("employeeId");

                    b.ToTable("EmployeeInfos");
                });

            modelBuilder.Entity("projectpayroll.Models.EmployeeSalaryMaster", b =>
                {
                    b.Property<int>("employeeSalaryMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("basicSalary")
                        .HasColumnType("double");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("employeestatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("salaryRate")
                        .HasColumnType("double");

                    b.HasKey("employeeSalaryMasterId");

                    b.HasIndex("departmentId");

                    b.ToTable("EmployeeSalaryMasters");
                });

            modelBuilder.Entity("projectpayroll.Models.InfoMaster", b =>
                {
                    b.Property<int>("InfoMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("information")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("value")
                        .HasColumnType("double");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("InfoMasterId");

                    b.ToTable("InfoMasters");
                });

            modelBuilder.Entity("projectpayroll.Models.OT", b =>
                {
                    b.Property<int>("oTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TotalHour")
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("oStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("oTDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("oTFinish")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("oTStart")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("oTId");

                    b.HasIndex("employeeId");

                    b.ToTable("OTs");
                });

            modelBuilder.Entity("projectpayroll.Models.OTC", b =>
                {
                    b.Property<int>("oTCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("month")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("oTId")
                        .HasColumnType("int");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.Property<int>("years")
                        .HasColumnType("int");

                    b.HasKey("oTCId");

                    b.HasIndex("oTId");

                    b.ToTable("OTCs");
                });

            modelBuilder.Entity("projectpayroll.Models.OTrate", b =>
                {
                    b.Property<int>("oTrateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("oTrateId");

                    b.HasIndex("departmentId");

                    b.ToTable("OTrates");
                });

            modelBuilder.Entity("projectpayroll.Models.bank", b =>
                {
                    b.Property<int>("bankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("bankName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("bankId");

                    b.ToTable("banks");
                });

            modelBuilder.Entity("projectpayroll.Models.clocking", b =>
                {
                    b.Property<int>("clockingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("breakIn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("breakOut")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("clockingIn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("clockingOut")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.HasKey("clockingId");

                    b.HasIndex("employeeId");

                    b.ToTable("clockings");
                });

            modelBuilder.Entity("projectpayroll.Models.department", b =>
                {
                    b.Property<int>("departmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("departmentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("departmentId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("projectpayroll.Models.employee", b =>
                {
                    b.Property<int>("employeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BankAccount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CitizenID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PassportNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("bankId")
                        .HasColumnType("int");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.HasKey("employeeId");

                    b.HasIndex("bankId");

                    b.HasIndex("departmentId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("projectpayroll.Models.slipMaster", b =>
                {
                    b.Property<int>("slipMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("slipMasterName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("slipMasterType")
                        .HasColumnType("int");

                    b.HasKey("slipMasterId");

                    b.ToTable("slipMasters");
                });

            modelBuilder.Entity("projectpayroll.Models.slipSalary", b =>
                {
                    b.Property<int>("slipSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<int>("slipMasterId")
                        .HasColumnType("int");

                    b.Property<double>("value")
                        .HasColumnType("double");

                    b.HasKey("slipSalaryId");

                    b.HasIndex("employeeId");

                    b.HasIndex("slipMasterId");

                    b.ToTable("slipSalarys");
                });

            modelBuilder.Entity("projectpayroll.Models.ssfund", b =>
                {
                    b.Property<int>("ssfundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("month")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("ssfundId");

                    b.HasIndex("employeeId");

                    b.ToTable("ssfunds");
                });

            modelBuilder.Entity("projectpayroll.Models.tax", b =>
                {
                    b.Property<int>("taxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<double>("netSalary")
                        .HasColumnType("double");

                    b.Property<double>("taxY")
                        .HasColumnType("double");

                    b.Property<string>("year")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("taxId");

                    b.HasIndex("employeeId");

                    b.ToTable("taxs");
                });

            modelBuilder.Entity("projectpayroll.Models.workingTime", b =>
                {
                    b.Property<int>("workingTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("finish")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("start")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("workingTimeId");

                    b.HasIndex("departmentId");

                    b.ToTable("workingTimes");
                });

            modelBuilder.Entity("projectpayroll.Models.CurrentSalary", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectpayroll.Models.EmployeeSalaryMaster", "employeesalarymaster")
                        .WithMany()
                        .HasForeignKey("employeeSalaryMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.EmployeeInfo", b =>
                {
                    b.HasOne("projectpayroll.Models.InfoMaster", "InfoMaster")
                        .WithMany()
                        .HasForeignKey("InfoMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.EmployeeSalaryMaster", b =>
                {
                    b.HasOne("projectpayroll.Models.department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.OT", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.OTC", b =>
                {
                    b.HasOne("projectpayroll.Models.OT", "OT")
                        .WithMany()
                        .HasForeignKey("oTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.OTrate", b =>
                {
                    b.HasOne("projectpayroll.Models.department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.clocking", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.employee", b =>
                {
                    b.HasOne("projectpayroll.Models.bank", "bank")
                        .WithMany()
                        .HasForeignKey("bankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectpayroll.Models.department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.slipSalary", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectpayroll.Models.slipMaster", "slipMaster")
                        .WithMany()
                        .HasForeignKey("slipMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.ssfund", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.tax", b =>
                {
                    b.HasOne("projectpayroll.Models.employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectpayroll.Models.workingTime", b =>
                {
                    b.HasOne("projectpayroll.Models.department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
