
<div id='app1' v-cloak>

    <v-app>
         
        <v-card>
            
          <v-card-title class="justify-center" style="font-size: 30px;">
              The Pure Water & Ice Company Limited
                
          </v-card-title>
          <v-card-title class="justify-center" style="font-size: 25px;">
              
                  Salary Slip
          </v-card-title>
          
          <v-card-text>
              <table >
                  <td>
                <div style="width: 500px;">
              <table style="font-size: 25px"> 
              <tr >
                  <td class="employee">Employee Name</td>
                  <td class="employee">: {{employee.employeeName}}</td>
                  
              </tr>
              <tr>
                  <td class="employee">Department</td>
                  <td class="employee">: {{employee.departmentName}} </td>
              </tr>
              <tr>
                  <td class="employee">Position</td>
                  <td class="employee">: {{employee.position}}</td>
              </tr>
              </table>
              </div>  
              </td>
              <td>
                <div class="w3-display-right">
              <table style="font-size: 25px"> 
              <tr>
                  <td class="employee">Employee ID</td>
                  <td class="employee">: {{employee.employeeId}}</td>
                  
              </tr>
              <tr>
                  <td class="employee">Date</td>
                  <td class="employee">: {{Date2}}</td>
              </tr>
              <tr>
                  <td class="employee"></td>
                  <td class="employee"></td>
              </tr>
              
              </table>
              </div>  
              </td>
              </table>
              
          </v-card-text>
          
            <table class="table table-bordered" >
            <thead>
                <tr>
                    <th style="width: 700px;text-align: center;">Salary Slip Detail</th>
                    <th style="text-align: center;">Earning</th>
                    <th style="text-align: center;">Deduction</th>
                </tr>
            </thead>
                <tbody>
                    <tr v-for="valuedetails in valuedetail">
                        <td >{{valuedetails.title}}</td>
                        <td style="text-align: right;">{{valuedetails.valueE}}</td>
                        <td style="text-align: right;">{{valuedetails.valueD}}</td>
                    </tr>
                    <tr>
                        <th>Total</th>
                        <th style="text-align: right;">{{TE}}</th>
                        <th style="text-align: right;">{{TD}}</th>
                    </tr>
                    <tr>
                        <th>Net Salary</th>
                        <th colspan="2" style="text-align: right;">{{NP}}</th>
                    </tr>
                </tbody>
            </table>
        </v-card>
    </v-app>
</div>
<style>
    table.table-bordered > thead > tr > th{
  border:1px solid black;
  font-size: 20px;
}
table.table-bordered > tbody > tr > td{
  border:1px solid black;
  font-size: 20px;
}
table.table-bordered > tbody > tr > th{
  border:1px solid black;
  font-size: 20px;
}
    .headline{
        margin: 20px;
    }
    td.employee {
  height: 50px;
}
    td.data2{
         margin: 0;
    padding: 0;
    border: 0;
    }
    .borderless td, .borderless th {
    border: none;
}
tr.Etable{
    height: 200px;
    
}
</style>
@section scripts{
    <script>
        var app;
            var component = {
                vuetify: new Vuetify()
                ,
                el:'#app1'
                ,
                data:{
                    
                    employees:{},employee:[],departments:[],all:[],Earning:[],valueE:[],Deduction:[],valueD:[],slip:[],TE:[],TD:[],NP:[],EV:[],DV:[],valuedetail:[]
                    ,
                    date: new Date().toISOString().substr(0, 10),Date2:[]

                }//edata
                ,
                created(){
                  
                
                  this.ot           = @Html.Raw(Json.Serialize(@ViewBag.OTCs));
                  this.tax          = @Html.Raw(Json.Serialize(@ViewBag.taxs));
                  this.salary       = @Html.Raw(Json.Serialize(@ViewBag.CurrentSalarys));
                  this.ssf          = @Html.Raw(Json.Serialize(@ViewBag.ssfunds));
                  this.slipMaster   = @Html.Raw(Json.Serialize(@ViewBag.slipMasters));
                  this.employees    = @Html.Raw(Json.Serialize(@ViewBag.employee));
                  this.departments  = @Html.Raw(Json.Serialize(@ViewBag.departments));
                  
                  this.Date2=("2021"+"-"+this.ssf[0].month+"-"+"25")
                  
                   
                  this.employee     =  {
                        employeeId      : this.employees.employeeId,
                        employeeName    : this.employees.firstName+" "+this.employees.lastName,
                        departmentName  : this.departments.filter(x=>x.departmentId==this.employees.departmentId)[0].departmentName,
                        position        : this.employees.position 
                  }
                  
                  
                  for(i=0;i<this.tax.length;i++){
                    this.tax[i].value= Math.floor(this.tax[i].value/12) 
                  }
                  
                  if(this.ot[0]==null){
                     this.all.push(this.tax[0],this.salary[0],this.ssf[0])
                  }
                  else{
                  this.all.push(this.ot[0],this.tax[0],this.salary[0],this.ssf[0])
                  }
                 for(i=0;i<this.all.length;i++){
                      for(a=0;a<this.slipMaster.length;a++){
                        if(this.all[i].slipMasterId==this.slipMaster[a].slipMasterId){
                            if(this.slipMaster[a].slipMasterType==1){
                                 this.Earning.push({
                                     title  : this.slipMaster.filter(x=>x.slipMasterId==this.all[i].slipMasterId)[0].slipMasterName,
                                     valueE : parseInt(this.all[i].value),
                                     valueD : 0
                                 })
                            }
                            else{
                                
                                this.Deduction.push({
                                     title  : this.slipMaster.filter(x=>x.slipMasterId==this.all[i].slipMasterId)[0].slipMasterName,
                                     valueD : this.all[i].value,
                                     valueE : 0
                                 })
                                
                            }
                        }
                      }
                  }
                  for(i=0;i<this.Earning.length;i++){
                    this.valuedetail.push(this.Earning[i])

                  }
                  for(i=0;i<this.Deduction.length;i++){
                    this.valuedetail.push(this.Deduction[i])

                  }
                  console.log(this.valuedetail)
                  console.log(this.Earning.length)
                  this.NP = 0
                  this.TD = 0
                  this.TE = 0
                  for(i=0;i<this.Earning.length;i++){
                      this.TE =  this.Earning[i].valueE+this.TE
                      console.log(this.TE)
                  }
                   console.log(this.TE)
                  for(a=0;a<this.Deduction.length;a++){
                      this.TD = this.Deduction[a].valueD+this.TD
                  }
                  this.NP=this.TE-this.TD
                  for(i=0;i<this.Earning.length;i++){
                      this.Earning[i].valueE = numberWithCommas((this.Earning[i].valueE).toFixed(2))
                      
                  }
                  function numberWithCommas(x) {
                  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                  }
                  this.TE = numberWithCommas((this.TE).toFixed(2))
                  for(i=0;i<this.Deduction.length;i++){
                      this.Deduction[i].valueD = numberWithCommas((this.Deduction[i].valueD).toFixed(2))
                  }
                  this.TD = numberWithCommas((this.TD).toFixed(2))
                  this.NP = numberWithCommas((this.NP).toFixed(2))
                  console.log(this.Deduction)
                  console.log(this.TE)
                  console.log(this.TD)
                  
                  
                  //this.select_employee = @Html.Raw(Json.Serialize(@ViewBag.select_employee));
                  //this.slipMasters = @Html.Raw(Json.Serialize(@ViewBag.slipMasters));
                  //this.select_slipMaster = @Html.Raw(Json.Serialize(@ViewBag.select_slipMaster));
                  //  var div = document.getElementById('sum');
                  //  div.innerHTML = "{{Earnings.value}}";
                     
                }//ecreated
                ,
                methods:{
                  edit_slipsalary(){
                    window.location= '/slipsalary/index';
                    
                  }//emethod
                  

                }//emethod
                ,
                 computed:{

                 }//ecomputed
            };
            app = new Vue(component);


    </script>

}